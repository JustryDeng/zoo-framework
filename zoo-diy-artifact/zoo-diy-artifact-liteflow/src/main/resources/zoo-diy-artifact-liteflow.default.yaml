zoo:
  guide:
    diy:
      zoo-liteflow:
        order: 70
        name: "zoo-diy-artifact-liteflow"
        instruction: |-
          1.此组件提供基于liteflow的规则引擎能力支持
        manual: |-
          1.此组件从数据库中读取规则，并动态加载到liteflow中；且此组件默认开启SQL数据轮询自动刷新机制，这是默认配置（你可以按需修改它）：
          liteflow:
            # 默认启用liteflow
            enable: true
            #liteflow的banner打印是否开启，默认为true
            print-banner: false
            # 打印流程执行
            print-execution-log: false
            # sql数据库配置源
            rule-source: el_xml:com.ideaaedi.zoo.diy.artifact.liteflow.parser.SQLXmlELParserExt
            # SQLXmlELParserExt会用到的配置
            rule-source-ext-data-map:
              url: ${spring.datasource.url:${spring.datasource.dynamic.datasource.master.url:}}
              driverClassName: ${spring.datasource.driver-class-name:${spring.datasource.dynamic.datasource.master.driver-class-name:}}
              username: ${spring.datasource.username:${spring.datasource.dynamic.datasource.master.username:}}
              password: ${spring.datasource.password:${spring.datasource.dynamic.datasource.master.password:}}
              # 当前应用的应用名称，去数据库查询时，会只查询当前应用的chain、script
              applicationName: ${spring.application.name}
              #是否开启SQL日志（同时需要print-execution-log为true才会打印）
              sqlLogEnabled: true
              ###是否开启SQL数据轮询自动刷新机制 默认不开启
              pollingEnabled: true
              pollingIntervalSeconds: 180
              pollingStartSeconds: 180
              ###以下是chain表的配置，这个一定得有
              chainTableName: liteflow_chain
              chainApplicationNameField: application_name
              chainNameField: chain_name
              elDataField: el_data
              #以下是决策路由字段的配置，如果你没用到决策路由，可以不配置
              routeField: route
              namespaceField: namespace
              #是否启用这条规则
              chainEnableField: enable
              # 数据逻辑删除字段及未删除值（无逻辑删除字段的话，不填即可）
              chainDeleteField: deleted
              chainNotDeleteValue: 0
              ###以下是script表的配置，如果你没使用到脚本，下面可以不配置
              scriptTableName: liteflow_script
              scriptApplicationNameField: application_name
              scriptIdField: script_id
              scriptNameField: script_name
              scriptDataField: script_data
              scriptTypeField: script_type
              scriptLanguageField: script_language
              scriptEnableField: enable
              # 数据逻辑删除字段及未删除值（无逻辑删除字段的话，不填即可）
              scriptDeleteField: deleted
              scriptNotDeleteValue: 0
          
          2. 如果pollingEnabled为true，你应该在数据库创建相关表，如（以MySQL为例）：
          CREATE TABLE `liteflow_chain`  (
              `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'id',
              `application_name` varchar(32) NOT NULL COMMENT '所属应用',
              `chain_name` varchar(32) NOT NULL COMMENT '规则名称（定位chain的标识）',
              `chain_desc` varchar(64) NULL DEFAULT NULL COMMENT '规则描述',
              `el_data` text NOT NULL COMMENT '规则',
              `route` text NULL COMMENT '路由',
              `namespace` varchar(32) NULL DEFAULT NULL COMMENT '路由所属命名空间',
              `enable` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否启用（1-启用；0-不启用）',
              `deleted` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否已删除(0-未删除；1-已删除)',
              `created_by` bigint(20) NOT NULL COMMENT '创建人',
              `created_at` datetime NOT NULL COMMENT '创建时间',
              `updated_by` bigint(20) NOT NULL COMMENT '修改人',
              `updated_at` datetime NOT NULL COMMENT '修改时间',
              PRIMARY KEY (`id`) USING BTREE,
              INDEX `application_name_idx`(`application_name` ASC) USING BTREE,
              INDEX `chain_name_idx`(`chain_name` ASC) USING BTREE,
              INDEX `enable_idx`(`enable` ASC) USING BTREE,
              INDEX `namespace_idx`(`namespace` ASC) USING BTREE
          ) ENGINE = InnoDB ROW_FORMAT = Dynamic;

          CREATE TABLE `liteflow_script`  (
              `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
              `application_name` varchar(32) NOT NULL COMMENT '所属应用',
              `script_id` varchar(32) NOT NULL COMMENT '脚本id（定位node的标识）',
              `script_name` varchar(64) NULL DEFAULT NULL COMMENT '脚本名称',
              `script_data` text NOT NULL COMMENT '脚本',
              -- 支持哪些脚本类型，详见源码 https://github.com/dromara/liteflow/blob/master/liteflow-core/src/main/resources/dtd/liteflow.dtd
              `script_type` enum('script','boolean_script','switch_script','for_script') NOT NULL COMMENT '脚本类型（script|boolean_script|switch_script|for_script）',
              -- 支持哪些脚本语言，详见源码 https://github.com/dromara/liteflow/blob/master/liteflow-core/src/main/resources/dtd/liteflow.dtd
              `script_language` enum('qlexpress','groovy','js','python','lua','aviator','java','kotlin') NOT NULL COMMENT '脚本语言（qlexpress|groovy|js|python|lua|aviator|java|kotlin）',
              `enable` tinyint(1) NOT NULL DEFAULT 1 COMMENT '是否启用（1-启用；0-不启用）',
              `deleted` bit(1) NOT NULL DEFAULT b'0' COMMENT '是否已删除(0-未删除；1-已删除)',
              `created_by` bigint(20) NOT NULL COMMENT '创建人',
              `created_at` datetime NOT NULL COMMENT '创建时间',
              `updated_by` bigint(20) NOT NULL COMMENT '修改人',
              `updated_at` datetime NOT NULL COMMENT '修改时间',
              PRIMARY KEY (`id`) USING BTREE,
              INDEX `application_name_idx`(`application_name` ASC) USING BTREE,
              INDEX `script_id_idx`(`script_id` ASC) USING BTREE,
              INDEX `script_type_idx`(`script_type` ASC) USING BTREE,
              INDEX `script_language_idx`(`script_language` ASC) USING BTREE,
              INDEX `enable_idx`(`enable` ASC) USING BTREE
          ) ENGINE = InnoDB ROW_FORMAT = Dynamic;
        contacts:
          - name: "作者邮箱"
            value: "13548417409@163.com"
        links:
          - name: "官网"
            value: "https://liteflow.cc/"

liteflow:
  # 默认启用liteflow
  enable: true
  #liteflow的banner打印是否开启，默认为true
  print-banner: false
  # 打印流程执行
  print-execution-log: false
  # sql数据库配置源
  rule-source: el_xml:com.ideaaedi.zoo.diy.artifact.liteflow.parser.SQLXmlELParserExt
  # SQLXmlELParserExt会用到的配置
  rule-source-ext-data-map:
    url: ${spring.datasource.url:${spring.datasource.dynamic.datasource.master.url:}}
    driverClassName: ${spring.datasource.driver-class-name:${spring.datasource.dynamic.datasource.master.driver-class-name:}}
    username: ${spring.datasource.username:${spring.datasource.dynamic.datasource.master.username:}}
    password: ${spring.datasource.password:${spring.datasource.dynamic.datasource.master.password:}}
    # 当前应用的应用名称，去数据库查询时，会只查询当前应用的chain、script
    applicationName: ${spring.application.name}
    #是否开启SQL日志（同时需要print-execution-log为true才会打印）
    sqlLogEnabled: true
    #是否开启SQL数据轮询自动刷新机制 默认不开启
    pollingEnabled: true
    pollingIntervalSeconds: 180
    pollingStartSeconds: 180

    #以下是chain表的配置，这个一定得有
    chainTableName: liteflow_chain
    chainApplicationNameField: application_name
    chainNameField: chain_name
    elDataField: el_data
    #以下是决策路由字段的配置，如果你没用到决策路由，可以不配置
    routeField: route
    namespaceField: namespace
    #是否启用这条规则
    chainEnableField: enable
    # 数据逻辑删除字段及未删除值（无逻辑删除字段的话，不填即可）
    chainDeleteField: deleted
    chainNotDeleteValue: 0

    #以下是script表的配置，如果你没使用到脚本，下面可以不配置
    scriptTableName: liteflow_script
    scriptApplicationNameField: application_name
    scriptIdField: script_id
    scriptNameField: script_name
    scriptDataField: script_data
    scriptTypeField: script_type
    scriptLanguageField: script_language
    scriptEnableField: enable
    # 数据逻辑删除字段及未删除值（无逻辑删除字段的话，不填即可）
    scriptDeleteField: deleted
    scriptNotDeleteValue: 0